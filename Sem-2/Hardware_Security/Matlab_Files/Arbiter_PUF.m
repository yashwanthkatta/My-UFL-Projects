%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: M:\HS_Project\Arbiter_PUF.xlsx
%    Worksheet: Sheet1
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2019/04/24 21:29:34

%% Import the data
[~, ~, raw] = xlsread('M:\HS_Project\Arbiter_PUF.xlsx','Sheet1');
raw = raw(:,1:4);
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
Arbiter = table;

%% Allocate imported array to column variable names
Arbiter.Challenge_Bits = data(:,1);
Arbiter.Response_Bits = data(:,2);
Arbiter.RX23 = data(:,3);
Arbiter.RX45 = data(:,4);

%% Clear temporary variables
clearvars data raw R;
%% CALCULATING UNIFORMITY OF THE ARBITER PUF

Count_UNI = sum(Arbiter.Response_Bits(:) == 1);
Uniformity_Arbiter_PUF = Count_UNI/length(Arbiter.Response_Bits);

%% Calculating the Reliability

Count_REL = sum(Arbiter.Response_Bits(:) == 1) + sum(Arbiter.Response_Bits(:) == 0);
Reliability_Arbiter_PUF = Count_REL/length(Arbiter.Response_Bits);

%% Calculating the Uniqueness

Count_UNIQ =  sum(Arbiter.Response_Bits == Arbiter.RX23 == Arbiter.RX45);
Arbiter_Uniqueness = (height(Arbiter) - Count_UNIQ)/height(Arbiter);
